#!/usr/bin/env python3
"""
Script de configura√ß√£o inicial do banco de dados
Verifica se as tabelas existem e est√£o configuradas corretamente
"""

import os
import sys
from pathlib import Path

# Adicionar src ao path
sys.path.append(str(Path(__file__).parent.parent))

from dotenv import load_dotenv
from src.database import SupabaseManager
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def verificar_tabelas():
    """Verifica se as tabelas necess√°rias existem no Supabase"""
    print("üîç Verificando estrutura do banco de dados...")
    
    try:
        supabase = SupabaseManager()
        
        # Lista de tabelas que devem existir
        tabelas_necessarias = [
            "artistas",
            "contatos_artistas", 
            "conversas",
            "estados_conversa",
            "artista_tenants"
        ]
        
        tabelas_existentes = []
        tabelas_faltantes = []
        
        for tabela in tabelas_necessarias:
            try:
                # Tentar fazer uma query simples para verificar se a tabela existe
                result = supabase.supabase.table(tabela).select("*").limit(1).execute()
                tabelas_existentes.append(tabela)
                print(f"‚úÖ Tabela '{tabela}' encontrada")
            except Exception as e:
                tabelas_faltantes.append(tabela)
                print(f"‚ùå Tabela '{tabela}' n√£o encontrada: {str(e)}")
        
        if tabelas_faltantes:
            print(f"\n‚ö†Ô∏è  Tabelas faltantes: {', '.join(tabelas_faltantes)}")
            print("Execute o script SQL de cria√ß√£o das tabelas primeiro.")
            return False
        else:
            print(f"\n‚úÖ Todas as {len(tabelas_existentes)} tabelas necess√°rias est√£o presentes")
            return True
            
    except Exception as e:
        print(f"‚ùå Erro ao conectar com o banco: {str(e)}")
        return False


def testar_operacoes_basicas():
    """Testa opera√ß√µes b√°sicas de CRUD"""
    print("\nüß™ Testando opera√ß√µes b√°sicas...")
    
    try:
        supabase = SupabaseManager()
        
        # Testar inser√ß√£o na tabela de estados_conversa
        telefone_teste = "test_setup_" + str(hash("test"))[:8]
        
        estado_data = {
            "telefone_hash": telefone_teste,
            "dados_coletados": {"teste": "setup"},
            "etapa_atual": "teste",
            "tentativas_coleta": 0,
            "mensagens_historico": ["teste"]
        }
        
        # Inserir
        result = supabase.supabase.table("estados_conversa").insert(estado_data).execute()
        if result.data:
            print("‚úÖ Opera√ß√£o de INSERT funcionando")
            
            # Buscar
            search_result = supabase.supabase.table("estados_conversa")\
                .select("*")\
                .eq("telefone_hash", telefone_teste)\
                .execute()
            
            if search_result.data:
                print("‚úÖ Opera√ß√£o de SELECT funcionando")
                
                # Limpar dados de teste
                delete_result = supabase.supabase.table("estados_conversa")\
                    .delete()\
                    .eq("telefone_hash", telefone_teste)\
                    .execute()
                
                if delete_result:
                    print("‚úÖ Opera√ß√£o de DELETE funcionando")
                    return True
        
        print("‚ùå Algumas opera√ß√µes b√°sicas falharam")
        return False
        
    except Exception as e:
        print(f"‚ùå Erro nas opera√ß√µes b√°sicas: {str(e)}")
        return False


def verificar_indices():
    """Verifica se √≠ndices importantes est√£o criados"""
    print("\nüìä Verificando √≠ndices e performance...")
    
    # Para este MVP, apenas logar que a verifica√ß√£o deveria ser feita
    print("‚ÑπÔ∏è  Para produ√ß√£o, considere criar √≠ndices em:")
    print("   - contatos_artistas.valor (busca por telefone)")
    print("   - conversas.artista_id (hist√≥rico de conversas)")
    print("   - estados_conversa.telefone_hash (estado da conversa)")
    print("   - artista_tenants.tenant_id (listagem por tenant)")
    
    return True


def configurar_rls():
    """Informa√ß√µes sobre Row Level Security"""
    print("\nüîí Row Level Security (RLS):")
    print("‚ÑπÔ∏è  Para produ√ß√£o, configure pol√≠ticas RLS em:")
    print("   - artistas: acesso baseado em tenant")
    print("   - contatos_artistas: acesso via artista")
    print("   - conversas: acesso via tenant")
    print("   - artista_tenants: acesso restrito por tenant")
    
    return True


def main():
    """Executa configura√ß√£o completa do banco"""
    print("üöÄ CONFIGURA√á√ÉO DO BANCO DE DADOS - WIP ARTISTA BOT")
    print("=" * 60)
    
    # Carregar vari√°veis de ambiente
    load_dotenv()
    
    # Verificar vari√°veis necess√°rias
    if not os.getenv("SUPABASE_URL") or not os.getenv("SUPABASE_KEY"):
        print("‚ùå Vari√°veis SUPABASE_URL e SUPABASE_KEY devem estar configuradas")
        return 1
    
    resultados = []
    
    # 1. Verificar tabelas
    resultados.append(("Verifica√ß√£o de Tabelas", verificar_tabelas()))
    
    # 2. Testar opera√ß√µes b√°sicas
    resultados.append(("Opera√ß√µes B√°sicas", testar_operacoes_basicas()))
    
    # 3. Verificar √≠ndices
    resultados.append(("√çndices", verificar_indices()))
    
    # 4. Configurar RLS
    resultados.append(("RLS Info", configurar_rls()))
    
    # Resumo
    print("\n" + "=" * 60)
    print("üìã RESUMO DA CONFIGURA√á√ÉO")
    print("=" * 60)
    
    sucessos = 0
    for nome, sucesso in resultados:
        status = "‚úÖ OK" if sucesso else "‚ùå ERRO"
        print(f"{nome:<25} {status}")
        if sucesso:
            sucessos += 1
    
    if sucessos == len(resultados):
        print("\nüéâ BANCO DE DADOS CONFIGURADO COM SUCESSO!")
        print("\nPr√≥ximos passos:")
        print("1. Execute o script de teste de integra√ß√£o:")
        print("   python scripts/test_integration.py")
        print("2. Inicie a aplica√ß√£o:")
        print("   python main.py")
        return 0
    else:
        print("\n‚ö†Ô∏è  ALGUNS PROBLEMAS FORAM ENCONTRADOS.")
        print("Verifique os erros acima e execute novamente.")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)